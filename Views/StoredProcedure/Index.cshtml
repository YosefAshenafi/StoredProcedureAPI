@model IEnumerable<StoredProcedureAPI.Models.StoredProcedureViewModel>

@{
    ViewData["Title"] = "Stored Procedures";
}

@section Styles {
    <link rel="stylesheet" href="~/css/storedProcedure.css" />
}

<div class="container w-75">
    <div class="card shadow-sm">
        <div class="card-header bg-white">
            <div class="d-flex justify-content-between align-items-center">
                <h3 class="mb-0"><i class="bi bi-plug me-2"></i>Endpoints</h3>
                <div class="input-group mx-3" style="max-width: 400px;">
                    <input type="text" class="form-control" id="searchInput" placeholder="Search..." style="border-color: #f6f4f4;
    border-radius: 50px;">
                </div>
                <div class="btn-group">
                    <a href="/swagger" class="btn btn-outline-secondary">
                        <i class="bi bi-braces me-2"></i>Swagger
                    </a>
                    <button type="button" class="btn btn-outline-primary" onclick="refreshList()">
                        <i class="bi bi-arrow-clockwise"></i>
                    </button>
                </div>
            </div>
        </div>
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover mb-0">
                    <thead class="table-light">
                        <tr>
                            <th class="px-4" style="width: 50%">Name</th>
                            <th class="text-center">Visibility</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model)
                        {
                            <tr class="sp-row">
                                <td class="px-4">
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-code-square text-primary me-2"></i>
                                        <a class="text-decoration-none text-dark sp-name" 
                                           data-bs-toggle="collapse" 
                                           href="#collapse_@item.Name.Replace(".", "_")" 
                                           role="button" 
                                           aria-expanded="false">
                                            @item.Name
                                            <i class="bi bi-chevron-down ms-2 small"></i>
                                        </a>
                                    </div>
                                </td>
                                <td class="text-center">
                                    <form asp-action="UpdateVisibility" method="post" class="d-inline">
                                        <input type="hidden" name="procedureName" value="@item.Name" />
                                        <div class="form-check form-switch d-flex justify-content-center">
                                            <input class="form-check-input" type="checkbox" 
                                                   @(item.IsVisible ? "checked" : "")
                                                   onchange="handleCheckboxChange(this)"
                                                   id="checkbox_@item.Name"
                                                   style="cursor: pointer;">
                                            <input type="hidden" name="isPublic" id="hidden_@item.Name" value="@item.IsVisible.ToString().ToLower()" />
                                        </div>
                                    </form>
                                </td>
                                @* <td class="text-center">
                                    <a asp-action="Details" asp-route-name="@item.Name" 
                                       class="btn btn-outline-primary btn-sm">
                                        <i class="bi bi-info-circle"></i> Details
                                    </a>
                                </td> *@
                            </tr>
                            <tr>
                                <td colspan="2" class="p-0">
                                    <div class="collapse" id="collapse_@item.Name.Replace(".", "_")">
                                        <div class="card card-body border-0 bg-dark">
                                            <div class="row g-4">
                                                <div class="col-md-6">
                                                    <div class="code-block-container">
                                                        <div class="code-block">
                                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                                <h6 class="mb-0">
                                                                    <i class="bi bi-arrow-right-square me-2"></i>Details
                                                                </h6>
                                                            </div>
                                                            <div class="json-editor">
                                                                <div class="loading-spinner d-none">
                                                                    <div class="spinner-border text-light" role="status">
                                                                        <span class="visually-hidden">Loading...</span>
                                                                    </div>
                                                                </div>
                                                                <pre class="mb-0"><code id="parameters_@item.Name"></code></pre>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                                <div class="col-md-6">
                                                    <div class="code-block-container">
                                                        <div class="code-block">
                                                            <div class="d-flex justify-content-between align-items-center mb-2">
                                                                <h6 class="mb-0">
                                                                    <i class="bi bi-arrow-right-square me-2"></i>Sample Request
                                                                </h6>
                                                            </div>
                                                            <div class="json-editor">
                                                                <div class="loading-spinner d-none">
                                                                    <div class="spinner-border text-light" role="status">
                                                                        <span class="visually-hidden">Loading...</span>
                                                                    </div>
                                                                </div>
                                                                <pre class="mb-0"><code id="response_@item.Name"></code></pre>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function refreshList() {
            window.location.reload();
        }

        function handleCheckboxChange(checkbox) {
            const hiddenInput = document.getElementById('hidden_' + checkbox.id.replace('checkbox_', ''));
            hiddenInput.value = checkbox.checked;
            checkbox.form.submit();
        }
    </script>
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('searchInput');
            
            searchInput.addEventListener('input', function() {
                const searchTerm = this.value.toLowerCase();
                const spRows = document.querySelectorAll('.sp-row');
                
                spRows.forEach(row => {
                    const spName = row.querySelector('.sp-name').textContent.toLowerCase();
                    const nextRow = row.nextElementSibling;
                    
                    if (spName.includes(searchTerm)) {
                        row.style.display = '';
                        if (nextRow) nextRow.style.display = '';
                    } else {
                        row.style.display = 'none';
                        if (nextRow) nextRow.style.display = 'none';
                    }
                });
            });

            const spRows = document.querySelectorAll('.sp-row');
            spRows.forEach(row => {
                const link = row.querySelector('a[data-bs-toggle="collapse"]');
                const procedureName = link.textContent.trim().replace(/\s+/g, '');
                
                link.addEventListener('click', async function() {
                    const isExpanded = this.getAttribute('aria-expanded') === 'true';
                    if (isExpanded) {
                        spRows.forEach(r => r.classList.remove('selected'));
                        row.classList.add('selected');
                        
                        // Show loading spinners
                        const spinners = row.nextElementSibling.querySelectorAll('.loading-spinner');
                        spinners.forEach(spinner => spinner.classList.remove('d-none'));
                        
                        try {
                            const response = await fetch(`/api/dynamicApi/procedures/${procedureName}/details`);
                            const collapseElement = row.nextElementSibling.querySelector('.card-body');
                            
                            if (response.status === 404) {
                                collapseElement.innerHTML = `
                                    <div class="code-block-container">
                                        <div class="code-block">
                                            <div class="json-editor">
                                                <pre class="mb-0 text-warning"><code>⚠️ This API is currently private. Please enable visibility or contact your administrator to make it accessible.</code></pre>
                                            </div>
                                        </div>
                                    </div>`;
                                return;
                            }
                            
                            // If API is accessible, show the original content
                            collapseElement.innerHTML = `
                                <div class="row g-4">
                                    <div class="col-md-6">
                                        <div class="code-block-container">
                                            <div class="code-block">
                                                <div class="d-flex justify-content-between align-items-center mb-2">
                                                    <h6 class="mb-0">
                                                        <i class="bi bi-arrow-right-square me-2"></i>Details
                                                    </h6>
                                                </div>
                                                <div class="json-editor">
                                                    <div class="loading-spinner d-none">
                                                        <div class="spinner-border text-light" role="status">
                                                            <span class="visually-hidden">Loading...</span>
                                                        </div>
                                                    </div>
                                                    <pre class="mb-0"><code id="parameters_${procedureName.replace(/\./g, '_')}"></code></pre>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <div class="col-md-6">
                                        <div class="code-block-container">
                                            <div class="code-block">
                                                <div class="d-flex justify-content-between align-items-center mb-2">
                                                    <h6 class="mb-0">
                                                        <i class="bi bi-arrow-right-square me-2"></i>Sample Request
                                                    </h6>
                                                </div>
                                                <div class="json-editor">
                                                    <div class="loading-spinner d-none">
                                                        <div class="spinner-border text-light" role="status">
                                                            <span class="visually-hidden">Loading...</span>
                                                        </div>
                                                    </div>
                                                    <pre class="mb-0"><code id="response_${procedureName.replace(/\./g, '_')}"></code></pre>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>`;
                            
                            const data = await response.json();
                            
                            // Format and display parameters
                            if (parametersElement && data.parameters) {
                                const formattedParams = {};
                                data.parameters.forEach(p => {
                                    formattedParams[p.name] = {
                                        type: p.dataType,
                                        mode: p.mode
                                    };
                                });
                                parametersElement.textContent = JSON.stringify(formattedParams, null, 2);
                            }

                            // Format and display sample response
                            if (responseElement && data.parameters) {
                                const sampleRequest = {};
                                data.parameters.forEach(p => {
                                    if (p.mode.toUpperCase() === 'IN') {
                                        sampleRequest[p.name] = getSampleValue(p.dataType);
                                    }
                                });
                                responseElement.textContent = JSON.stringify(sampleRequest, null, 2);
                            }
                        } catch (error) {
                            console.error('Error fetching procedure details:', error);
                            const parametersElement = document.getElementById(`parameters_${procedureName.replace(/\./g, '_')}`);
                            const responseElement = document.getElementById(`response_${procedureName.replace(/\./g, '_')}`);
                            if (parametersElement) {
                                parametersElement.textContent = error.message || 'An unexpected error occurred';
                            }
                            if (responseElement) {
                                responseElement.textContent = error.message || 'An unexpected error occurred';
                            }
                        } finally {
                            // Hide loading spinners
                            spinners.forEach(spinner => spinner.classList.add('d-none'));
                        }
                    } else {
                        row.classList.remove('selected');
                    }
                });

                function getSampleValue(dataType) {
                    switch (dataType.toLowerCase()) {
                        case 'varchar':
                        case 'char':
                        case 'text':
                            return "sample_text";
                        case 'int':
                        case 'bigint':
                        case 'smallint':
                        case 'tinyint':
                            return 0;
                        case 'decimal':
                        case 'float':
                        case 'double':
                            return 0.0;
                        case 'datetime':
                        case 'timestamp':
                        case 'date':
                            return "2024-01-01";
                        case 'bit':
                        case 'boolean':
                            return false;
                        default:
                            return "";
                    }
                }
            });
        });
    </script>
}